{"version":3,"file":"static/js/665.8580fb06.chunk.js","mappings":"+NAGaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAejB,OACE,kBAAMC,SAda,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACjBN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACN,EAGC,WACE,yCAEE,kBAAOC,KAAK,OAAON,KAAK,aAE1B,sCAEE,kBAAOM,KAAK,QAAQN,KAAK,cAE3B,yCAEE,kBAAOM,KAAK,WAAWN,KAAK,iBAE9B,mBAAQM,KAAK,SAAb,wBAGL,ECtBD,EAXiB,WACf,OACE,4BACE,SAAC,KAAD,WACE,2CAEF,SAACf,EAAD,MAGL,C,qICTDgB,EAAAA,EAAAA,SAAAA,QAAyB,wCAEzB,IAAMC,EAAgB,SAAAC,GACpBF,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAA,iBAAwDE,EACzD,EAMYV,GAAWW,EAAAA,EAAAA,IACtB,gBADsC,mCAEtC,WAAOC,EAAMC,GAAb,gGAE2BL,EAAAA,EAAAA,KAAW,gBAAiBI,GAFvD,cAEUE,EAFV,OAGIL,EAAcK,EAASC,KAAKL,OAHhC,kBAIWI,EAASC,MAJpB,yDAMWF,EAASG,gBAAgB,KAAMC,UAN1C,yDAFsC,yDAa3BC,GAAQP,EAAAA,EAAAA,IAAiB,aAAD,mCAAe,WAAOC,EAAMC,GAAb,gGAEzBL,EAAAA,EAAAA,KAAW,eAAgBI,GAFF,cAE1CE,EAF0C,OAGhDL,EAAcK,EAASC,KAAKL,OAHoB,kBAIzCI,EAASC,MAJgC,yDAMzCF,EAASG,gBAAgB,KAAMC,UANU,yDAAf,0DAUfN,EAAAA,EAAAA,IAAiB,cAAD,mCAAgB,WAAOQ,EAAGN,GAAV,0FAE5CL,EAAAA,EAAAA,KAAW,gBAFiC,OA1BpDA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAA8C,GA0BM,wEAK3CK,EAASG,gBAAgB,KAAMC,UALY,wDAAhB,0DASXN,EAAAA,EAAAA,IACzB,eADyC,mCAEzC,WAAOQ,EAAGN,GAAV,8EACQO,EAAQP,EAASQ,WAGA,QAFjBC,EAAiBF,EAAMG,KAAKb,OAFpC,yCAKWG,EAASG,gBAAgB,yBALpC,uBASIP,EAAca,GATlB,SAU2Bd,EAAAA,EAAAA,IAAU,aAVrC,cAUUM,EAVV,yBAWWA,EAASC,MAXpB,2DAaWF,EAASG,gBAAgB,KAAMC,UAb1C,0DAFyC,wD","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.js","redux/auth/operations.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Username\n        <input type=\"text\" name=\"name\" />\n      </label>\n      <label>\n        Email\n        <input type=\"email\" name=\"email\" />\n      </label>\n      <label>\n        Password\n        <input type=\"password\" name=\"password\" />\n      </label>\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n","import { Helmet } from 'react-helmet-async';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <Helmet>\n        <title>Register</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default Register;\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (user, thunkAPI) => {\n    try {\n      const response = await axios.post('/users/signup', user);\n      setAuthHeader(response.data.token);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const logIn = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    const response = await axios.post('/users/login', user);\n    setAuthHeader(response.data.token);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\nexport const logout = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('users/logout');\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\nexport const refreshUser = createAsyncThunk(\n  'auth/current',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      setAuthHeader(persistedToken);\n      const response = await axios.get('/users/me');\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n"],"names":["RegisterForm","dispatch","useDispatch","onSubmit","evt","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","type","axios","setAuthHeader","token","createAsyncThunk","user","thunkAPI","response","data","rejectWithValue","message","logIn","_","state","getState","persistedToken","auth"],"sourceRoot":""}