{"version":3,"file":"static/js/742.6d752e84.chunk.js","mappings":"0OAEaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEjBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EAEpBC,EAAW,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,EAEhBC,GAAiBC,EAAAA,EAAAA,IAC5B,CAACX,EAAaI,IACd,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAO,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASV,EAAOS,cADf,GAG/B,I,6BCbUE,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wKAULE,EAASF,EAAAA,GAAAA,OAAH,8H,SCPNG,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAI7B,OACE,SAAC,KAAD,CACEwB,cAAe,CAAEX,KAAM,GAAIY,OAAQ,IACnCC,SAAU,SAACC,EAAQC,GACjBP,GAASQ,EAAAA,EAAAA,IAAWF,IAPN,SAACzB,EAAUyB,GAAX,OAClBzB,EAAS4B,MAAK,SAAAlB,GAAO,OAAIA,EAAQC,OAASc,EAAOd,IAA5B,GADH,CAQVkB,CAAY7B,EAAUyB,IACxBK,MAAM,GAAD,OAAIL,EAAOd,KAAX,kCAEPe,EAAQK,WACT,EARH,UAUE,UAAC,KAAD,YACE,qCAEE,SAACjB,EAAD,CAAOkB,KAAK,OAAOrB,KAAK,UACxB,SAAC,KAAD,CAAcA,KAAK,aAErB,uCAEE,SAACG,EAAD,CAAOkB,KAAK,MAAMrB,KAAK,YACvB,SAAC,KAAD,CAAcA,KAAK,eAErB,SAACM,EAAD,CAAQe,KAAK,SAAb,6BAIP,ECpCYC,EAAOlB,EAAAA,GAAAA,GAAH,wGAOJmB,EAAcnB,EAAAA,GAAAA,GAAH,gF,mBCPXoB,EAAapB,EAAAA,GAAAA,OAAH,2JCGVqB,EAAU,SAAC,GAAuC,IAAD,IAApC1B,QAAW2B,EAAyB,EAAzBA,GAAI1B,EAAqB,EAArBA,KAAMY,EAAe,EAAfA,OACvCJ,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iCACE,uBAAIT,KACJ,uBAAIY,KACJ,SAACY,EAAD,CAAYH,KAAK,SAASM,QANT,kBAAMnB,GAASoB,EAAAA,EAAAA,IAAcF,GAA7B,EAMjB,sBAKL,EAEDD,EAAQI,SAAW,CACjB7B,KAAM8B,IAAAA,OAAAA,WACNlB,OAAQkB,IAAAA,OAAAA,YCnBH,I,ECCMC,EAAc,WACzB,IAAMC,GDFyBtB,EAAAA,EAAAA,IAAYb,GCI3C,OACE,SAACyB,EAAD,UACGU,EAAgBC,KAAI,SAAAlC,GAAO,OAC1B,SAACwB,EAAD,WACE,SAACE,EAAD,CAAS1B,QAASA,KADFA,EAAQ2B,GADA,KAOjC,ECdYQ,EAAc9B,EAAAA,GAAAA,MAAH,8I,UCIX+B,EAAS,WACpB,IAAM3C,GAASkB,EAAAA,EAAAA,IAAYnB,GACrBiB,GAAWC,EAAAA,EAAAA,MAOjB,OACE,qDAEE,SAACyB,EAAD,CACEb,KAAK,OACLrB,KAAK,SACLoC,MAAO5C,EACP6C,SAZe,SAAAC,GACnB,IAAMF,EAAQE,EAAIC,OAAOH,MACzB5B,GAASgC,EAAAA,EAAAA,GAAiBJ,GAC3B,EAUKK,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,MAIf,ECKD,EAzBiB,WACf,IAAMnC,GAAWC,EAAAA,EAAAA,MACXb,GAAQc,EAAAA,EAAAA,IAAYf,GACpBD,GAAYgB,EAAAA,EAAAA,IAAYjB,GAM9B,OAJAmD,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAGF,iCACE,uCACA,SAACD,EAAD,KAGA,8CAEA,0CACCb,IAAcE,IAAS,gDACxB,SAACuC,EAAD,KACA,SAACJ,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/hooks/useContacts.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const selectContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { Field as FormikField } from 'formik';\n\nexport const Field = styled(FormikField)`\n  display: flex;\n  flex-direction: column;\n\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid lightgrey;\n  margin-bottom: 15px;\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  border-radius: 5px;\n  border: 2px solid lightgreen;\n  background-color: white;\n`;\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { Field, Button } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const findContact = (contacts, values) =>\n    contacts.find(contact => contact.name === values.name);\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={(values, actions) => {\n        dispatch(addContact(values));\n        if (findContact(contacts, values)) {\n          alert(`${values.name} is already in your contacts.`);\n        }\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" />\n        </label>\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n`;\n","import styled from 'styled-components';\n\nexport const ListButton = styled.button`\n  padding: 5px 10px;\n  height: 35px;\n  border-radius: 5px;\n  border: 2px solid rgb(238, 119, 119);\n  background-color: white;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ListButton } from './Contact.styled';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <p>{name}</p>\n      <p>{number}</p>\n      <ListButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </ListButton>\n    </>\n  );\n};\n\nContact.PropType = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const useContacts = () => useSelector(selectContacts);\n","import { List, ContactItem } from './ContactList.styled';\nimport { Contact } from 'components/Contact/Contact';\nimport { useContacts } from 'components/hooks/useContacts';\n\nexport const ContactList = () => {\n  const visibleContacts = useContacts();\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid lightgrey;\n  margin-bottom: 15px;\n  margin-left: 10px;\n`;\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { FilterInput } from './Filter.styled';\nimport { setContactFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const value = evt.target.value;\n    dispatch(setContactFilter(value));\n  };\n\n  return (\n    <label>\n      Find contact by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      {/* <Helmet> */}\n      <title>Your contacts</title>\n      {/* </Helmet> */}\n      <h2>Your contacts</h2>\n      {isLoading && !error && <p>Loading contacts...</p>}\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","selectContacts","createSelector","contact","name","toLowerCase","includes","Field","styled","FormikField","Button","ContactForm","dispatch","useDispatch","useSelector","initialValues","number","onSubmit","values","actions","addContact","find","findContact","alert","resetForm","type","List","ContactItem","ListButton","Contact","id","onClick","deleteContact","PropType","PropTypes","ContactList","visibleContacts","map","FilterInput","Filter","value","onChange","evt","target","setContactFilter","pattern","title","required","useEffect","fetchContacts"],"sourceRoot":""}